// This file is automatically generated by `quarto build-js`! Do not edit.",
//
// If you find yourself trying to rebuild types and `quarto build-js` won't run because
// of bad type definitions, run the following:
// $ cd $QUARTO_ROOT
// $ ./package/dist/bin/tools/deno run --importmap=./src/dev_import_map.json --allow-all ./package/src/common/create-schema-types.ts ./src/resources

export type MaybeArrayOf<T> = (T | T[]);
export type SchemaObject = { [key: string]: string };

export type MathMethods = (
  | "plain"
  | "webtex"
  | "gladtex"
  | "mathml"
  | "mathjax"
  | "katex"
);

export type PandocFormatRequestHeaders = ((string)[])[];

export type PandocFormatOutputFile = (string | null);

export type PandocFormatFilters =
  ((string | { type: string; path: string } | { type: "citeproc" }))[];

export type PandocShortcodes = (string)[];

export type PageColumn = (
  | "body"
  | "body-outset"
  | "body-outset-left"
  | "body-outset-right"
  | "page"
  | "page-left"
  | "page-right"
  | "page-inset-left"
  | "page-inset-right"
  | "screen"
  | "screen-left"
  | "screen-right"
  | "screen-rightcolumn"
  | "screen-inset"
  | "screen-inset-shaded"
  | "screen-inset-left"
  | "screen-inset-right"
  | "margin"
);

export type NavigationItemObject = {
  "aria-label"?: string;
  file?: string;
  href?: string;
  id?: string;
  icon?: string;
  menu?: (NavigationItem)[];
  text?: string;
  url?: string;
};

export type NavigationItem = (string | NavigationItemObject);

export type ToolItem = {
  file?: string;
  href?: string;
  icon?: string;
  menu?: (NavigationItem)[];
  text?: string;
  url?: string;
};

export type Comments = (false | {
  giscus?: {
    "repo-id"?: string;
    "category-id"?: string;
    "reactions-enabled"?: boolean;
    "input-position"?: (
      | "top"
      | "bottom"
    ) /* Place the comment input box above or below the comments. */;
    category?: string;
    loading?: "lazy";
    language?: string;
    mapping?: (
      | ("pathname" | "url" | "title" | "og:title")
      | string
    ) /* The mapping between the page and the embedded discussion.

- `pathname`: The discussion title contains the page path
- `url`: The discussion title contains the page url
- `title`: The discussion title contains the page title
- `og:title`: The discussion title contains the `og:title` metadata value
- any other string or number: Any other strings will be passed through verbatim and a discussion title
containing that value will be used. Numbers will be treated
as a discussion number and automatic discussion creation is not supported.
 */;
    repo: string;
    theme?: (
      | "light"
      | "light_high_contrast"
      | "light_protanopia"
      | "dark"
      | "dark_high_contrast"
      | "dark_protanopia"
      | "dark_dimmed"
      | "transparent_dark"
      | "preferred_color_scheme"
    ); /* The giscus theme to use when displaying comments. */
  };
  hypothesis?: (boolean | {
    assetRoot?: string;
    branding?: {
      accentColor?: string;
      appBackgroundColor?: string;
      annotationFontFamily?: string;
      ctaBackgroundColor?: string;
      selectionFontFamily?: string;
    };
    enableExperimentalNewNoteButton?: boolean;
    externalContainerSelector?: string;
    focus?: {
      user: { displayName?: string; username?: string; userid?: string };
    } /* Defines a focused filter set for the available annotations on a page. */;
    openSidebar?: boolean;
    requestConfigFromFrame?: { ancestorLevel?: number; origin?: string };
    showHighlights?: (
      | boolean
      | ("always" | "never")
    ) /* Controls whether the in-document highlights are shown by default (`always` or `never`) */;
    services?: (
      {
        apiUrl: string;
        authority: string;
        allowLeavingGroups?: boolean;
        enableShareLinks?: boolean;
        grantToken: string;
        groups?: (
          | "$rpc:requestGroups"
          | (string)[]
        ) /* An array of Group IDs or the literal string `$rpc:requestGroups` */;
        icon?: string;
      } /* Alternative annotation services which the client should
connect to instead of connecting to the public Hypothesis
service at hypothes.is.
 */
    )[];
    sidebarAppUrl?: string;
    theme?: (
      | "classic"
      | "clean"
    ) /* Controls the overall look of the sidebar (`classic` or `clean`) */;
    usernameUrl?: string;
  });
  utterances?: {
    "issue-term"?: string;
    label?: string;
    repo: string;
    theme?: string;
  };
});

export type SocialMetadata = {
  "image-alt"?: string;
  "image-width"?: number;
  "image-height"?: number;
  description?: string;
  image?: string;
  title?: string;
};

export type PageFooterRegion = (string | (NavigationItem)[]);

export type SidebarContents = ((NavigationItem | string | {
  contents?: SidebarContents;
  section?: (string | null);
}))[];

export type ProjectPreview = {
  "watch-inputs"?: boolean;
  browser?: boolean;
  host?: string;
  navigate?: boolean;
  port?: number;
  timeout?: number;
};

export type Publish = { netlify?: (PublishRecord)[] };

export type PublishRecord = { id?: string; url?: string };

export type BaseWebsite = {
  "site-url"?: string;
  "site-path"?: string;
  "repo-url"?: string;
  "repo-subdir"?: string;
  "repo-branch"?: string;
  "repo-actions"?: MaybeArrayOf<
    (
      | "none"
      | "edit"
      | "source"
      | "issue"
    ) /* Links to source repository actions (`none` or one or more of `edit`, `source`, `issue`) */
  >;
  "reader-mode"?: boolean;
  "google-analytics"?: (string | {
    "tracking-id"?: string;
    "anonymize-ip"?: boolean;
    storage?: (
      | "cookies"
      | "none"
    ) /* Storage option for Google Analytics data using on of these two values:

`cookies`: Use cookies to store unique user and session identification (default).

`none`: Do not use cookies to store unique user and session identification.

For more about choosing storage options see [Storage](https://quarto.org/docs/websites/website-tools.html#storage).
 */;
    version?: (3 | 4); /* The version number of Google Analytics to use.

- `3`: Use analytics.js
- `4`: use gtag.

This is automatically detected based upon the `tracking-id`, but you may specify it.
 */
  }) /* Enable Google Analytics for this website */;
  "cookie-consent"?: (boolean | {
    "policy-url"?: string;
    "prefs-text"?: string;
    palette?: (
      | "light"
      | "dark"
    ) /* Whether to use a dark or light appearance for the consent banner (`light` or `dark`). */;
    style?: (
      | "simple"
      | "headline"
      | "interstitial"
      | "standalone"
    ) /* The style of the consent banner that is displayed:

- `simple` (default): A simple dialog in the lower right corner of the website.

- `headline`: A full width banner across the top of the website.

- `interstitial`: An semi-transparent overlay of the entire website.

- `standalone`: An opaque overlay of the entire website.
 */;
    type?: (
      | "implied"
      | "express"
    ); /* The type of consent that should be requested, using one of these two values:

- `implied` (default): This will notify the user that the site uses cookies and permit them to change preferences, but not block cookies unless the user changes their preferences.

- `express`: This will block cookies until the user expressly agrees to allow them (or continue blocking them if the user doesn’t agree).
 */
  }) /* Quarto includes the ability to request cookie consent before enabling scripts that set cookies, using [Cookie Consent](https://www.cookieconsent.com/).

The user’s cookie preferences will automatically control Google Analytics (if enabled) and can be used to control custom scripts you add as well. For more information see [Custom Scripts and Cookie Consent](https://quarto.org/docs/websites/website-tools.html#custom-scripts-and-cookie-consent).
 */;
  "body-header"?: string;
  "body-footer"?: string;
  "margin-header"?: MaybeArrayOf<
    string
  > /* Markdown to place above margin content (text or file path) */;
  "margin-footer"?: MaybeArrayOf<
    string
  > /* Markdown to place below margin content (text or file path) */;
  "page-navigation"?: boolean;
  "page-footer"?: (string | {
    border?: (
      | boolean
      | string
    ) /* Footer border (`true`, `false`, or a border color) */;
    background?: string;
    center?: PageFooterRegion;
    foreground?: string;
    left?: PageFooterRegion;
    right?: PageFooterRegion;
  }) /* Shared page footer */;
  "open-graph"?: (
    | boolean
    | ({ "site-name"?: string; locale?: string } & SocialMetadata)
  ) /* Publish open graph metadata */;
  "twitter-card"?: (
    | boolean
    | ({
      "card-style"?: (
        | "summary"
        | "summary_large_image"
      ) /* Card style (`summary` or `summary_large_image`).

If this is not provided, the best style will automatically
selected based upon other metadata. You can learn more about Twitter Card
styles [here](https://developer.twitter.com/en/docs/twitter-for-websites/cards/overview/abouts-cards).
 */;
      creator?: string;
      site?: string;
    } & SocialMetadata)
  ) /* Publish twitter card metadata */;
  comments?: Comments;
  description?: string;
  favicon?: string;
  image?: string;
  navbar?: (boolean | {
    "logo-alt"?: string;
    "logo-href"?: string;
    "collapse-below"?: (
      | "sm"
      | "md"
      | "lg"
      | "xl"
      | "xxl"
    ) /* The responsive breakpoint below which the navbar will collapse into a menu (`sm`, `md`, `lg` (default), `xl`, `xxl`). */;
    background?: (
      | (
        | "primary"
        | "secondary"
        | "success"
        | "danger"
        | "warning"
        | "info"
        | "light"
        | "dark"
      )
      | string
    ) /* The navbar's background color (named or hex color). */;
    collapse?: boolean;
    foreground?: (
      | (
        | "primary"
        | "secondary"
        | "success"
        | "danger"
        | "warning"
        | "info"
        | "light"
        | "dark"
      )
      | string
    ) /* The navbar's foreground color (named or hex color). */;
    logo?: string;
    left?:
      (NavigationItem)[] /* List of items for the left side of the navbar. */;
    pinned?: boolean;
    right?:
      (NavigationItem)[] /* List of items for the right side of the navbar. */;
    search?: boolean;
    title?: (
      | string
      | boolean
    ); /* The navbar title. Uses the project title if none is specified. */
  }) /* Top navigation options */;
  search?: (boolean | {
    "collapse-after"?: number;
    "copy-button"?: boolean;
    algolia?: {
      "index-name"?: string;
      "application-id"?: string;
      "search-only-api-key"?: string;
      "analytics-events"?: boolean;
      "show-logo"?: boolean;
      "index-fields"?: {
        href?: string;
        section?: string;
        title?: string;
        text?: string;
      };
      params?: SchemaObject;
    } /* Use external Algolia search index */;
    location?: (
      | "navbar"
      | "sidebar"
    ) /* Location for search widget (`navbar` or `sidebar`) */;
    limit?: number;
    type?: (
      | "overlay"
      | "textbox"
    ); /* Type of search UI (`overlay` or `textbox`) */
  }) /* Provide full text search for website */;
  sidebar?: (
    | boolean
    | MaybeArrayOf<
      {
        "collapse-level"?: number;
        alignment?: (
          | "left"
          | "right"
          | "center"
        ) /* Alignment of the items within the sidebar (`left`, `right`, or `center`) */;
        background?: (
          | (
            | "primary"
            | "secondary"
            | "success"
            | "danger"
            | "warning"
            | "info"
            | "light"
            | "dark"
          )
          | string
        ) /* The sidebar's background color (named or hex color). */;
        border?: boolean;
        contents?: SidebarContents;
        foreground?: (
          | (
            | "primary"
            | "secondary"
            | "success"
            | "danger"
            | "warning"
            | "info"
            | "light"
            | "dark"
          )
          | string
        ) /* The sidebar's foreground color (named or hex color). */;
        footer?: MaybeArrayOf<
          string
        > /* Markdown to place below sidebar content (text or file path) */;
        header?: MaybeArrayOf<
          string
        > /* Markdown to place above sidebar content (text or file path) */;
        id?: string;
        logo?: string;
        pinned?: boolean;
        subtitle?: string;
        search?: boolean;
        style?: (
          | "docked"
          | "floating"
        ) /* The style of sidebar (`docked` or `floating`). */;
        title?: (
          | string
          | boolean
        ) /* The sidebar title. Uses the project title if none is specified. */;
        tools?: (ToolItem)[]; /* List of sidebar tools */
      }
    >
  ) /* Side navigation options */;
  title?: string;
};

export type ChapterItem = (NavigationItem | {
  chapters?: (NavigationItem)[] /* Path to chapter input file */;
  part: string;
});

export type ChapterList = (ChapterItem)[];

export type CrossrefLabelsSchema = string;

export type EpubContributor = (
  | string
  | MaybeArrayOf<{ "file-as"?: string; role?: string; text?: string }>
);

export type FormatLanguage = {
  "toc-title-document"?: string;
  "toc-title-website"?: string;
  "callout-tip-caption"?: string;
  "callout-note-caption"?: string;
  "callout-warning-caption"?: string;
  "callout-important-caption"?: string;
  "callout-caution-caption"?: string;
  "section-title-abstract"?: string;
  "section-title-footnotes"?: string;
  "section-title-appendices"?: string;
  "code-summary"?: string;
  "code-tools-menu-caption"?: string;
  "code-tools-show-all-code"?: string;
  "code-tools-hide-all-code"?: string;
  "code-tools-view-source"?: string;
  "code-tools-source-code"?: string;
  "search-no-results-text"?: string;
  "copy-button-tooltip"?: string;
  "copy-button-tooltip-success"?: string;
  "repo-action-links-edit"?: string;
  "repo-action-links-source"?: string;
  "repo-action-links-issue"?: string;
  "search-matching-documents-text"?: string;
  "search-copy-link-title"?: string;
  "search-hide-matches-text"?: string;
  "search-more-match-text"?: string;
  "search-more-matches-text"?: string;
  "search-clear-button-title"?: string;
  "search-detached-cancel-button-title"?: string;
  "search-submit-button-title"?: string;
  "crossref-fig-title"?: string;
  "crossref-tbl-title"?: string;
  "crossref-lst-title"?: string;
  "crossref-thm-title"?: string;
  "crossref-lem-title"?: string;
  "crossref-cor-title"?: string;
  "crossref-prp-title"?: string;
  "crossref-cnj-title"?: string;
  "crossref-def-title"?: string;
  "crossref-exm-title"?: string;
  "crossref-exr-title"?: string;
  "crossref-fig-prefix"?: string;
  "crossref-tbl-prefix"?: string;
  "crossref-lst-prefix"?: string;
  "crossref-ch-prefix"?: string;
  "crossref-apx-prefix"?: string;
  "crossref-sec-prefix"?: string;
  "crossref-eq-prefix"?: string;
  "crossref-thm-prefix"?: string;
  "crossref-lem-prefix"?: string;
  "crossref-cor-prefix"?: string;
  "crossref-prp-prefix"?: string;
  "crossref-cnj-prefix"?: string;
  "crossref-def-prefix"?: string;
  "crossref-exm-prefix"?: string;
  "crossref-exr-prefix"?: string;
  "crossref-lof-title"?: string;
  "crossref-lot-title"?: string;
  "crossref-lol-title"?: string;
};

export type WebsiteAbout = {
  "image-width"?: string;
  "image-shape"?: (
    | "rectangle"
    | "round"
    | "rounded"
  ) /* The shape of the image on the about page.

- `rectangle`
- `round`
- `rounded`
 */;
  id?: string;
  image?: string;
  links?: (NavigationItem)[];
  template?: (
    | "jolla"
    | "trestles"
    | "solana"
    | "marquee"
    | "broadside"
  ); /* The template to use to layout this about page. Choose from:

- `jolla`
- `trestles`
- `solana`
- `marquee`
- `broadside`
 */
};

export type WebsiteListing = {
  "max-items"?: number;
  "page-size"?: number;
  "sort-ui"?: (
    | boolean
    | (string)[]
  ) /* Shows or hides the sorting control for the listing. To control the
fields that will be displayed in the sorting control, provide a list
of field names.
 */;
  "filter-ui"?: (
    | boolean
    | (string)[]
  ) /* Shows or hides the filtering control for the listing. To control the
fields that will be used to filter the listing, provide a list
of field names. By default all fields of the listing will be used
when filtering.
 */;
  "date-format"?: string;
  "max-description-length"?: number;
  "image-placeholder"?: string;
  "image-align"?: (
    | "left"
    | "right"
  ) /* In `default` type listings, whether to place the image on the right or left side of the post content (`left` or `right`). */;
  "image-height"?: string;
  "grid-columns"?: number;
  "grid-item-border"?: boolean;
  "grid-item-align"?: (
    | "left"
    | "right"
    | "center"
  ) /* In grid type listings, the alignment of the content within the card (`left` (default), `right`, or `center`).
 */;
  "table-striped"?: boolean;
  "table-hover"?: boolean;
  "field-display-names"?: SchemaObject;
  "field-types"?: SchemaObject;
  "field-links"?:
    (string)[] /* The list of fields to display as hyperlinks to the source document
when the listing type is a table. By default, only the `title` or
`filename` is displayed as a link.
 */;
  "field-required"?:
    (string)[] /* Fields that items in this listing must have populated.
If a listing is rendered and one more items in this listing
is missing a required field, an error will occur and the render will.
 */;
  contents?: MaybeArrayOf<
    (string | WebsiteListingContentsObject)
  > /* The files or path globs of Quarto documents or YAML files that should be included in the listing. */;
  categories?: (
    | boolean
    | ("numbered" | "unnumbered" | "cloud")
  ) /* Display item categories from this listing in the margin of the page.

  - `numbered`: Category list with number of items
  - `unnumbered`: Category list
  - `cloud`: Word cloud style categories
 */;
  feed?: (boolean | {
    categories?: MaybeArrayOf<string>;
    description?: string;
    items?: number;
    image?: string;
    language?: string;
    type?: (
      | "full"
      | "partial"
    ) /* Whether to include full or partial content in the feed.

- `full` (default): Include the complete content of the document in the feed.
- `partial`: Include only the first paragraph of the document in the feed.
 */;
    title?: string;
  }) /* Enables an RSS feed for the listing. */;
  fields?: (string)[] /* The list of fields to include in this listing.
 */;
  id?: string;
  sort?: MaybeArrayOf<
    string
  > /* Sort items in the listing by these fields. The sort key is made up of a
field name followed by a direction `asc` or `desc`.

For example:
`date asc`
 */;
  type?: (
    | "default"
    | "table"
    | "grid"
    | "custom"
  ) /* The type of listing to create. Choose one of:

- `default`: A blog style list of items
- `table`: A table of items
- `grid`: A grid of item cards
- `custom`: A custom template, provided by the `template` field
 */;
  template?: string;
};

export type WebsiteListingContentsObject = {
  author?: MaybeArrayOf<string>;
  date?: string;
  subtitle?: string;
  title?: string;
};

export type CslDate = (string | MaybeArrayOf<number>);

export type CslPerson = (
  | MaybeArrayOf<string>
  | MaybeArrayOf<{ "family-name"?: string; "given-name"?: string }>
);

export type CslNumber = (number | string);

export type CslItem = {
  "abstract-url"?: string;
  "archive-collection"?: string;
  "archive-location"?: string;
  "archive-place"?: string;
  "available-date"?: CslDate;
  "call-number"?: string;
  "chapter-number"?: CslNumber;
  "citation-key"?: string;
  "citation-label"?: string;
  "citation-number"?: CslNumber;
  "collection-editor"?: CslPerson;
  "collection-number"?: CslNumber;
  "collection-title"?: string;
  "container-author"?: CslPerson;
  "container-title"?: string;
  "container-title-short"?: string;
  "editorial-director"?: CslPerson;
  "editor-translator"?: CslPerson;
  "event-date"?: CslDate;
  "event-title"?: string;
  "event-place"?: string;
  "executive-producer"?: CslPerson;
  "first-reference-note-number"?: CslNumber;
  "fulltext-url"?: string;
  "number-of-pages"?: CslNumber;
  "number-of-volumes"?: CslNumber;
  "original-author"?: CslPerson;
  "original-date"?: CslDate;
  "original-publisher"?: string;
  "original-publisher-place"?: string;
  "original-title"?: string;
  "page-first"?: CslNumber;
  "page-last"?: CslNumber;
  "part-number"?: CslNumber;
  "part-title"?: string;
  "pdf-url"?: string;
  "printing-number"?: CslNumber;
  "public-url"?: string;
  "publisher-place"?: string;
  "reviewed-author"?: CslPerson;
  "reviewed-genre"?: string;
  "reviewed-title"?: string;
  "script-writer"?: CslPerson;
  "series-creator"?: CslPerson;
  "supplement-number"?: CslNumber;
  "title-short"?: string;
  "volume-title"?: string;
  "year-suffix"?: string;
  abstract?: string;
  accessed?: CslDate;
  annote?: string;
  archive?: string;
  archive_collection?: string;
  archive_location?: string;
  author?: CslPerson;
  authority?: string;
  chair?: CslPerson;
  compiler?: CslPerson;
  composer?: CslPerson;
  contributor?: CslPerson;
  curator?: CslPerson;
  dimensions?: string;
  director?: CslPerson;
  division?: string;
  doi?: string;
  DOI?: string;
  edition?: CslNumber;
  editor?: CslPerson;
  event?: string;
  genre?: string;
  guest?: CslPerson;
  host?: CslPerson;
  illustrator?: CslPerson;
  interviewer?: CslPerson;
  isbn?: string;
  issn?: string;
  issue?: CslNumber;
  issued?: CslDate;
  ISBN?: string;
  ISSN?: string;
  jurisdiction?: string;
  keyword?: string;
  language?: string;
  license?: string;
  locator?: CslNumber;
  medium?: string;
  narrator?: CslPerson;
  note?: string;
  number?: CslNumber;
  organizer?: CslPerson;
  page?: CslNumber;
  performer?: CslPerson;
  pmcid?: string;
  pmid?: string;
  producer?: CslPerson;
  publisher?: string;
  PMCID?: string;
  PMID?: string;
  recipient?: CslPerson;
  references?: string;
  scale?: string;
  section?: CslNumber;
  source?: string;
  status?: string;
  submitted?: CslDate;
  title?: string;
  translator?: CslPerson;
  type?: (
    | "article"
    | "article-journal"
    | "article-magazine"
    | "article-newspaper"
    | "bill"
    | "book"
    | "broadcast"
    | "chapter"
    | "classic"
    | "collection"
    | "dataset"
    | "document"
    | "entry"
    | "entry-dictionary"
    | "entry-encyclopedia"
    | "event"
    | "figure"
    | "graphic"
    | "hearing"
    | "interview"
    | "legal_case"
    | "legislation"
    | "manuscript"
    | "map"
    | "motion_picture"
    | "musical_score"
    | "pamphlet"
    | "paper-conference"
    | "patent"
    | "performance"
    | "periodical"
    | "personal_communication"
    | "post"
    | "post-weblog"
    | "regulation"
    | "report"
    | "review"
    | "review-book"
    | "software"
    | "song"
    | "speech"
    | "standard"
    | "thesis"
    | "treaty"
    | "webpage"
  ) /* The [type](https://docs.citationstyles.org/en/stable/specification.html#appendix-iii-types) of the item. */;
  url?: string;
  URL?: string;
  version?: CslNumber;
  volume?: CslNumber;
};

export type SmartInclude = ({ text: string } | { file: string });

export type Semver =
  string; /* Version number according to Semantic Versioning */

export type ProjectConfig = {
  "execute-dir"?:
    ("file" | "project") /* Control the working directory for computations.

- `file`: Use the directory of the file that is currently executing.
- `project`: Use the root directory of the project.
 */;
  "output-dir"?: string;
  "lib-dir"?: string;
  "pre-render"?: MaybeArrayOf<string>;
  "post-render"?: MaybeArrayOf<string>;
  preview?: ProjectPreview;
  render?: (string)[] /* Files to render (defaults to all files) */;
  resources?: MaybeArrayOf<string>;
  title?: string;
  type?: (
    | "default"
    | "website"
    | "book"
    | "site"
  ); /* Project type (`default`, `website`, or `book`) */
};

export type BookProject = ({
  "output-file"?: string;
  "cover-image"?: string;
  "cover-image-alt"?: string;
  author?: MaybeArrayOf<
    (string | SchemaObject) /* Author or authors of the book */
  >;
  abstract?: string;
  appendices?: ChapterList;
  chapters?: ChapterList;
  date?: string;
  description?: string;
  downloads?: MaybeArrayOf<
    (
      | "pdf"
      | "epub"
      | "docx"
    ) /* Download buttons for other formats to include on navbar or sidebar
(one or more of `pdf`, `epub`, and `docx`)
 */
  >;
  doi?: string;
  references?: string;
  subtitle?: string;
  sharing?: MaybeArrayOf<
    (
      | "twitter"
      | "facebook"
      | "linkedin"
    ) /* Sharing buttons to include on navbar or sidebar
(one or more of `twitter`, `facebook`, `linkedin`)
 */
  >;
  title?: string;
  tools?: (NavigationItem)[];
} & BaseWebsite);
